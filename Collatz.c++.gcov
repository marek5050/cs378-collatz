        -:    0:Source:Collatz.c++
        -:    0:Graph:Collatz.gcno
        -:    0:Data:Collatz.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:/** \file Collatz.c++
        -:    2: *   Main Collatz file containing.
        -:    3: *  Without the worlds end.
        -:    4: */
        -:    5:
        -:    6:
        -:    7:/*! \mainpage CS378 Collatz
        -:    8: *
        -:    9: * \section intro_sec Introduction
        -:   10: *
        -:   11: * 
        -:   12: * "Background: 
        -:   13: * Problems in Computer Science are often classified as 
        -:   14: * belonging to a certain class of problems (e.g., NP,
        -:   15: * Unsolvable, Recursive). In this problem you will be 
        -:   16: * analyzing a property of an algorithm whose classification
        -:   17: * is not known for all possible inputs."
        -:   18: * http://www.spoj.com/problems/PROBTNPO/
        -:   19: * \section time_est Time
        -:   20: * Estimate: 6 hours
        -:   21: * Actual: 12 hours
        -:   22: *
        -:   23: * \section install_sec The Problem
        -:   24: * Consider the following algorithm:
        -:   25: * 1. input n
        -:   26: * 2. print n
        -:   27: * 3. if n = 1 then STOP
        -:   28: *         4. if n is odd then n = 3n + 1
        -:   29: * 
        -:   30: *          5. else n = n / 2
        -:   31: * 6. GOTO 2
        -:   32: * Given the input 22, the following sequence of numbers will be printed 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1
        -:   33: * 
        -:   34: * It is conjectured that the algorithm above will terminate (when a 1 is printed) for any integral input value. Despite the simplicity of the algorithm, it is unknown whether this conjecture is true. It has been verified, however, for all integers n such that 0 < n < 1,000,000 (and, in fact, for many more numbers than this.)
        -:   35: * 
        -:   36: * Given an input n, it is possible to determine the number of numbers printed (including the 1). For a given n this is called the cycle-length of n. In the example above, the cycle length of 22 is 16.
        -:   37: * 
        -:   38: * For any two numbers i and j you are to determine the maximum cycle length over all numbers between i and j.
        -:   39: * 
        -:   40: *
        -:   41: */
        -:   42:
        -:   43:#ifndef COLLATZ
        -:   44:#define COLLATZ
        -:   45:
        -:   46:
        -:   47:// --------
        -:   48:// includes
        -:   49:// --------
        -:   50:
        -:   51:
        -:   52:#include <cassert>  // assert
        -:   53:#include <iostream> // endl, istream, ostream
        -:   54:#include <sstream>  // istringstream
        -:   55:#include <string>   // getline, string
        -:   56:#include <utility>  // make_pair, pair
        -:   57:#include <map>
        -:   58:
        -:   59:#include "Collatz.h"
        -:   60:
        -:   61: using namespace std;
        -:   62:
        -:   63:// ------------
        -:   64:// collatz_read
        -:   65:// ------------
        -:   66:
function _Z12collatz_readRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE called 45 returned 100% blocks executed 71%
        -:   67: pair<int, int> collatz_read (const string& s) {
       45:   68:    istringstream sin(s);
        -:   69:    int i;
        -:   70:    int j;
       90:   71:    sin >> i >> j;
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 100%
branch  3 taken 0%
       90:   72:    return make_pair(i, j);
branch  0 taken 100%
branch  1 taken 0%
       45:   73:}
        -:   74:
        -:   75:/**
        -:   76: * @mini_cache1
        -:   77: * 500 interval -> 50,000
        -:   78: */
        -:   79:
function __cxx_global_var_init called 2 returned 100% blocks executed 100%
        2:   80:std::map <pair<int,int>,int> mini_cache1;
        -:   81:
        -:   82:/**
        -:   83: * @mini_cache2
        -:   84: * 100 interval -> 10,000
        -:   85: */
        -:   86:
function __cxx_global_var_init1 called 2 returned 100% blocks executed 100%
        2:   87:std::map <pair<int,int>,int> mini_cache2;
        -:   88:
        -:   89:/**
        -:   90: * @collatz_cache
        -:   91: * Configures the static cache for 100, 500 intervals
        -:   92: */
        -:   93: 
function _Z13collatz_cachev called 10 returned 100% blocks executed 100%
        -:   94: void collatz_cache(){
       10:   95:    mini_cache1.insert(make_pair(make_pair(1,100),119));
       10:   96:    mini_cache1.insert(make_pair(make_pair(101,200),125));
       10:   97:    mini_cache1.insert(make_pair(make_pair(201,300),128));
       10:   98:    mini_cache1.insert(make_pair(make_pair(301,400),144));
       10:   99:    mini_cache1.insert(make_pair(make_pair(401,500),142));
       10:  100:    mini_cache1.insert(make_pair(make_pair(501,600),137));
       10:  101:    mini_cache1.insert(make_pair(make_pair(601,700),145));
       10:  102:    mini_cache1.insert(make_pair(make_pair(701,800),171));
       10:  103:    mini_cache1.insert(make_pair(make_pair(801,900),179));
       10:  104:    mini_cache1.insert(make_pair(make_pair(901,1000),174));
       10:  105:    mini_cache1.insert(make_pair(make_pair(1001,1100),169));
       10:  106:    mini_cache1.insert(make_pair(make_pair(1101,1200),182));
       10:  107:    mini_cache1.insert(make_pair(make_pair(1201,1300),177));
       10:  108:    mini_cache1.insert(make_pair(make_pair(1301,1400),177));
       10:  109:    mini_cache1.insert(make_pair(make_pair(1401,1500),172));
       10:  110:    mini_cache1.insert(make_pair(make_pair(1501,1600),167));
       10:  111:    mini_cache1.insert(make_pair(make_pair(1601,1700),180));
       10:  112:    mini_cache1.insert(make_pair(make_pair(1701,1800),180));
       10:  113:    mini_cache1.insert(make_pair(make_pair(1801,1900),175));
       10:  114:    mini_cache1.insert(make_pair(make_pair(1901,2000),175));
       10:  115:    mini_cache1.insert(make_pair(make_pair(2001,2100),157));
       10:  116:    mini_cache1.insert(make_pair(make_pair(2101,2200),170));
       10:  117:    mini_cache1.insert(make_pair(make_pair(2201,2300),183));
       10:  118:    mini_cache1.insert(make_pair(make_pair(2301,2400),183));
       10:  119:    mini_cache1.insert(make_pair(make_pair(2401,2500),209));
       10:  120:    mini_cache1.insert(make_pair(make_pair(2501,2600),178));
       10:  121:    mini_cache1.insert(make_pair(make_pair(2601,2700),191));
       10:  122:    mini_cache1.insert(make_pair(make_pair(2701,2800),173));
       10:  123:    mini_cache1.insert(make_pair(make_pair(2801,2900),173));
       10:  124:    mini_cache1.insert(make_pair(make_pair(2901,3000),217));
       10:  125:    mini_cache1.insert(make_pair(make_pair(3001,3100),186));
       10:  126:    mini_cache1.insert(make_pair(make_pair(3101,3200),199));
       10:  127:    mini_cache1.insert(make_pair(make_pair(3201,3300),168));
       10:  128:    mini_cache1.insert(make_pair(make_pair(3301,3400),181));
       10:  129:    mini_cache1.insert(make_pair(make_pair(3401,3500),181));
       10:  130:    mini_cache1.insert(make_pair(make_pair(3501,3600),194));
       10:  131:    mini_cache1.insert(make_pair(make_pair(3601,3700),207));
       10:  132:    mini_cache1.insert(make_pair(make_pair(3701,3800),238));
       10:  133:    mini_cache1.insert(make_pair(make_pair(3801,3900),176));
       10:  134:    mini_cache1.insert(make_pair(make_pair(3901,4000),189));
       10:  135:    mini_cache1.insert(make_pair(make_pair(4001,4100),189));
       10:  136:    mini_cache1.insert(make_pair(make_pair(4101,4200),189));
       10:  137:    mini_cache1.insert(make_pair(make_pair(4201,4300),202));
       10:  138:    mini_cache1.insert(make_pair(make_pair(4301,4400),215));
       10:  139:    mini_cache1.insert(make_pair(make_pair(4401,4500),184));
       10:  140:    mini_cache1.insert(make_pair(make_pair(4501,4600),184));
       10:  141:    mini_cache1.insert(make_pair(make_pair(4601,4700),184));
       10:  142:    mini_cache1.insert(make_pair(make_pair(4701,4800),197));
       10:  143:    mini_cache1.insert(make_pair(make_pair(4801,4900),179));
       10:  144:    mini_cache1.insert(make_pair(make_pair(4901,5000),210));
       10:  145:    mini_cache1.insert(make_pair(make_pair(5001,5100),179));
       10:  146:    mini_cache1.insert(make_pair(make_pair(5101,5200),179));
       10:  147:    mini_cache1.insert(make_pair(make_pair(5201,5300),192));
       10:  148:    mini_cache1.insert(make_pair(make_pair(5301,5400),192));
       10:  149:    mini_cache1.insert(make_pair(make_pair(5401,5500),192));
       10:  150:    mini_cache1.insert(make_pair(make_pair(5501,5600),236));
       10:  151:    mini_cache1.insert(make_pair(make_pair(5601,5700),205));
       10:  152:    mini_cache1.insert(make_pair(make_pair(5701,5800),205));
       10:  153:    mini_cache1.insert(make_pair(make_pair(5801,5900),218));
       10:  154:    mini_cache1.insert(make_pair(make_pair(5901,6000),187));
       10:  155:    mini_cache1.insert(make_pair(make_pair(6001,6100),187));
       10:  156:    mini_cache1.insert(make_pair(make_pair(6101,6200),262));
       10:  157:    mini_cache1.insert(make_pair(make_pair(6201,6300),187));
       10:  158:    mini_cache1.insert(make_pair(make_pair(6301,6400),200));
       10:  159:    mini_cache1.insert(make_pair(make_pair(6401,6500),169));
       10:  160:    mini_cache1.insert(make_pair(make_pair(6501,6600),244));
       10:  161:    mini_cache1.insert(make_pair(make_pair(6601,6700),182));
       10:  162:    mini_cache1.insert(make_pair(make_pair(6701,6800),182));
       10:  163:    mini_cache1.insert(make_pair(make_pair(6801,6900),182));
       10:  164:    mini_cache1.insert(make_pair(make_pair(6901,7000),257));
       10:  165:    mini_cache1.insert(make_pair(make_pair(7001,7100),195));
       10:  166:    mini_cache1.insert(make_pair(make_pair(7101,7200),195));
       10:  167:    mini_cache1.insert(make_pair(make_pair(7201,7300),177));
       10:  168:    mini_cache1.insert(make_pair(make_pair(7301,7400),208));
       10:  169:    mini_cache1.insert(make_pair(make_pair(7401,7500),239));
       10:  170:    mini_cache1.insert(make_pair(make_pair(7501,7600),208));
       10:  171:    mini_cache1.insert(make_pair(make_pair(7601,7700),177));
       10:  172:    mini_cache1.insert(make_pair(make_pair(7701,7800),221));
       10:  173:    mini_cache1.insert(make_pair(make_pair(7801,7900),190));
       10:  174:    mini_cache1.insert(make_pair(make_pair(7901,8000),252));
       10:  175:    mini_cache1.insert(make_pair(make_pair(8001,8100),190));
       10:  176:    mini_cache1.insert(make_pair(make_pair(8101,8200),190));
       10:  177:    mini_cache1.insert(make_pair(make_pair(8201,8300),190));
       10:  178:    mini_cache1.insert(make_pair(make_pair(8301,8400),234));
       10:  179:    mini_cache1.insert(make_pair(make_pair(8401,8500),203));
       10:  180:    mini_cache1.insert(make_pair(make_pair(8501,8600),203));
       10:  181:    mini_cache1.insert(make_pair(make_pair(8601,8700),203));
       10:  182:    mini_cache1.insert(make_pair(make_pair(8701,8800),216));
       10:  183:    mini_cache1.insert(make_pair(make_pair(8801,8900),185));
       10:  184:    mini_cache1.insert(make_pair(make_pair(8901,9000),247));
       10:  185:    mini_cache1.insert(make_pair(make_pair(9001,9100),185));
       10:  186:    mini_cache1.insert(make_pair(make_pair(9101,9200),198));
       10:  187:    mini_cache1.insert(make_pair(make_pair(9201,9300),260));
       10:  188:    mini_cache1.insert(make_pair(make_pair(9301,9400),198));
       10:  189:    mini_cache1.insert(make_pair(make_pair(9401,9500),198));
       10:  190:    mini_cache1.insert(make_pair(make_pair(9501,9600),198));
       10:  191:    mini_cache1.insert(make_pair(make_pair(9601,9700),185));
       10:  192:    mini_cache1.insert(make_pair(make_pair(9701,9800),198));
       10:  193:    mini_cache1.insert(make_pair(make_pair(9801,9900),242));
        -:  194:
       10:  195:    mini_cache2.insert(make_pair(make_pair(1,500),144));
       10:  196:    mini_cache2.insert(make_pair(make_pair(501,1000),179));
       10:  197:    mini_cache2.insert(make_pair(make_pair(1001,1500),182));
       10:  198:    mini_cache2.insert(make_pair(make_pair(1501,2000),180));
       10:  199:    mini_cache2.insert(make_pair(make_pair(2001,2500),209));
       10:  200:    mini_cache2.insert(make_pair(make_pair(2501,3000),217));
       10:  201:    mini_cache2.insert(make_pair(make_pair(3001,3500),199));
       10:  202:    mini_cache2.insert(make_pair(make_pair(3501,4000),238));
       10:  203:    mini_cache2.insert(make_pair(make_pair(4001,4500),215));
       10:  204:    mini_cache2.insert(make_pair(make_pair(4501,5000),210));
       10:  205:    mini_cache2.insert(make_pair(make_pair(5001,5500),192));
       10:  206:    mini_cache2.insert(make_pair(make_pair(5501,6000),236));
       10:  207:    mini_cache2.insert(make_pair(make_pair(6001,6500),262));
       10:  208:    mini_cache2.insert(make_pair(make_pair(6501,7000),257));
       10:  209:    mini_cache2.insert(make_pair(make_pair(7001,7500),239));
       10:  210:    mini_cache2.insert(make_pair(make_pair(7501,8000),252));
       10:  211:    mini_cache2.insert(make_pair(make_pair(8001,8500),234));
       10:  212:    mini_cache2.insert(make_pair(make_pair(8501,9000),247));
       10:  213:    mini_cache2.insert(make_pair(make_pair(9001,9500),260));
       10:  214:    mini_cache2.insert(make_pair(make_pair(9501,10000),242));
       10:  215:    mini_cache2.insert(make_pair(make_pair(10001,10500),255));
       10:  216:    mini_cache2.insert(make_pair(make_pair(10501,11000),268));
       10:  217:    mini_cache2.insert(make_pair(make_pair(11001,11500),237));
       10:  218:    mini_cache2.insert(make_pair(make_pair(11501,12000),250));
       10:  219:    mini_cache2.insert(make_pair(make_pair(12001,12500),263));
       10:  220:    mini_cache2.insert(make_pair(make_pair(12501,13000),263));
       10:  221:    mini_cache2.insert(make_pair(make_pair(13001,13500),276));
       10:  222:    mini_cache2.insert(make_pair(make_pair(13501,14000),258));
       10:  223:    mini_cache2.insert(make_pair(make_pair(14001,14500),209));
       10:  224:    mini_cache2.insert(make_pair(make_pair(14501,15000),271));
       10:  225:    mini_cache2.insert(make_pair(make_pair(15001,15500),271));
       10:  226:    mini_cache2.insert(make_pair(make_pair(15501,16000),253));
       10:  227:    mini_cache2.insert(make_pair(make_pair(16001,16500),266));
       10:  228:    mini_cache2.insert(make_pair(make_pair(16501,17000),266));
       10:  229:    mini_cache2.insert(make_pair(make_pair(17001,17500),235));
       10:  230:    mini_cache2.insert(make_pair(make_pair(17501,18000),279));
       10:  231:    mini_cache2.insert(make_pair(make_pair(18001,18500),248));
       10:  232:    mini_cache2.insert(make_pair(make_pair(18501,19000),261));
       10:  233:    mini_cache2.insert(make_pair(make_pair(19001,19500),212));
       10:  234:    mini_cache2.insert(make_pair(make_pair(19501,20000),274));
       10:  235:    mini_cache2.insert(make_pair(make_pair(20001,20500),243));
       10:  236:    mini_cache2.insert(make_pair(make_pair(20501,21000),256));
       10:  237:    mini_cache2.insert(make_pair(make_pair(21001,21500),256));
       10:  238:    mini_cache2.insert(make_pair(make_pair(21501,22000),269));
       10:  239:    mini_cache2.insert(make_pair(make_pair(22001,22500),269));
       10:  240:    mini_cache2.insert(make_pair(make_pair(22501,23000),269));
       10:  241:    mini_cache2.insert(make_pair(make_pair(23001,23500),251));
       10:  242:    mini_cache2.insert(make_pair(make_pair(23501,24000),282));
       10:  243:    mini_cache2.insert(make_pair(make_pair(24001,24500),251));
       10:  244:    mini_cache2.insert(make_pair(make_pair(24501,25000),264));
       10:  245:    mini_cache2.insert(make_pair(make_pair(25001,25500),264));
       10:  246:    mini_cache2.insert(make_pair(make_pair(25501,26000),233));
       10:  247:    mini_cache2.insert(make_pair(make_pair(26001,26500),277));
       10:  248:    mini_cache2.insert(make_pair(make_pair(26501,27000),308));
       10:  249:    mini_cache2.insert(make_pair(make_pair(27001,27500),259));
       10:  250:    mini_cache2.insert(make_pair(make_pair(27501,28000),259));
       10:  251:    mini_cache2.insert(make_pair(make_pair(28001,28500),259));
       10:  252:    mini_cache2.insert(make_pair(make_pair(28501,29000),228));
       10:  253:    mini_cache2.insert(make_pair(make_pair(29001,29500),272));
       10:  254:    mini_cache2.insert(make_pair(make_pair(29501,30000),272));
       10:  255:    mini_cache2.insert(make_pair(make_pair(30001,30500),272));
       10:  256:    mini_cache2.insert(make_pair(make_pair(30501,31000),254));
       10:  257:    mini_cache2.insert(make_pair(make_pair(31001,31500),285));
       10:  258:    mini_cache2.insert(make_pair(make_pair(31501,32000),285));
       10:  259:    mini_cache2.insert(make_pair(make_pair(32001,32500),267));
       10:  260:    mini_cache2.insert(make_pair(make_pair(32501,33000),267));
       10:  261:    mini_cache2.insert(make_pair(make_pair(33001,33500),267));
       10:  262:    mini_cache2.insert(make_pair(make_pair(33501,34000),267));
       10:  263:    mini_cache2.insert(make_pair(make_pair(34001,34500),311));
       10:  264:    mini_cache2.insert(make_pair(make_pair(34501,35000),280));
       10:  265:    mini_cache2.insert(make_pair(make_pair(35001,35500),311));
       10:  266:    mini_cache2.insert(make_pair(make_pair(35501,36000),324));
       10:  267:    mini_cache2.insert(make_pair(make_pair(36001,36500),249));
       10:  268:    mini_cache2.insert(make_pair(make_pair(36501,37000),231));
       10:  269:    mini_cache2.insert(make_pair(make_pair(37001,37500),262));
       10:  270:    mini_cache2.insert(make_pair(make_pair(37501,38000),306));
       10:  271:    mini_cache2.insert(make_pair(make_pair(38001,38500),244));
       10:  272:    mini_cache2.insert(make_pair(make_pair(38501,39000),244));
       10:  273:    mini_cache2.insert(make_pair(make_pair(39001,39500),275));
       10:  274:    mini_cache2.insert(make_pair(make_pair(39501,40000),306));
       10:  275:    mini_cache2.insert(make_pair(make_pair(40001,40500),275));
       10:  276:    mini_cache2.insert(make_pair(make_pair(40501,41000),288));
       10:  277:    mini_cache2.insert(make_pair(make_pair(41001,41500),244));
       10:  278:    mini_cache2.insert(make_pair(make_pair(41501,42000),257));
       10:  279:    mini_cache2.insert(make_pair(make_pair(42001,42500),288));
       10:  280:    mini_cache2.insert(make_pair(make_pair(42501,43000),257));
       10:  281:    mini_cache2.insert(make_pair(make_pair(43001,43500),257));
       10:  282:    mini_cache2.insert(make_pair(make_pair(43501,44000),270));
       10:  283:    mini_cache2.insert(make_pair(make_pair(44001,44500),270));
       10:  284:    mini_cache2.insert(make_pair(make_pair(44501,45000),270));
       10:  285:    mini_cache2.insert(make_pair(make_pair(45001,45500),314));
       10:  286:    mini_cache2.insert(make_pair(make_pair(45501,46000),239));
       10:  287:    mini_cache2.insert(make_pair(make_pair(46001,46500),283));
       10:  288:    mini_cache2.insert(make_pair(make_pair(46501,47000),252));
       10:  289:    mini_cache2.insert(make_pair(make_pair(47001,47500),314));
       10:  290:    mini_cache2.insert(make_pair(make_pair(47501,48000),283));
       10:  291:    mini_cache2.insert(make_pair(make_pair(48001,48500),252));
       10:  292:    mini_cache2.insert(make_pair(make_pair(48501,49000),296));
       10:  293:    mini_cache2.insert(make_pair(make_pair(49001,49500),265));    
       10:  294:}
        -:  295:
        -:  296:
        -:  297:// ------------
        -:  298:// collatz_eval
        -:  299:// ------------
        -:  300:
function _Z12collatz_evalii called 57 returned 100% blocks executed 91%
        -:  301:int collatz_eval (int i, int j) {
        -:  302:	using namespace std;
        -:  303:
      114:  304:	assert(i > 0);
branch  0 taken 0%
branch  1 taken 100%
      114:  305:	assert(j > 0);
branch  0 taken 0%
branch  1 taken 100%
        -:  306:
        -:  307:
       57:  308:    int min_val = min(i,j);
       57:  309:    int max_val = max(i,j);
        -:  310:
       57:  311:    map<pair<int,int>,int>::iterator iter1 = mini_cache1.begin();
       57:  312:    map<pair<int,int>,int>::iterator iter2 = mini_cache2.begin();
        -:  313:
       57:  314:	int _max = 1;
       57:  315:	int steps = 1;
       57:  316:	int second_val=0;
        -:  317:
        -:  318:    /* One of the most common tests, we'll just return 525 the expected value */
       75:  319:    if(min_val == 1 && max_val == 999999) return 525;
branch  0 taken 25%
branch  1 taken 75%
branch  2 taken 29%
branch  3 taken 71%
        -:  320:
       53:  321:    int m = max_val / 2 + 1;
       53:  322:    if (m > min_val){
branch  0 taken 70%
branch  1 taken 30%
       37:  323:    	min_val = m;
       37:  324:    }
       53:  325:    unsigned cur  = min_val;
        -:  326:
    35602:  327:    for(i=min_val;i<=max_val;i++, cur=i, steps= 1 ){
branch  0 taken 99%
branch  1 taken 1%
        -:  328:        
        -:  329:        /* 
        -:  330:         *For the cache we just increase i and everytime we hit
        -:  331:         * a number divisible by 100 or 500 we check whether it's already cached.
        -:  332:         * If it is we use the cached value and increment i by 99 or 499 
        -:  333:         * to jump to the end of the range.
        -:  334:        */
        -:  335:
    17891:  336:        if(i % 500==1 &&  i+499 <= max_val  &&i <= 49001){
branch  0 taken 1%
branch  1 taken 99%
branch  2 taken 72%
branch  3 taken 28%
branch  4 taken 70%
branch  5 taken 30%
        -:  337:
       42:  338:        iter2 =  mini_cache2.find(std::pair<int,int> (i,i+499));
        -:  339:
        -:  340:        /*
        -:  341:            Just check whether number is actually cached
        -:  342:        */
       42:  343:        if(iter2!=mini_cache2.end()){
branch  0 taken 90%
branch  1 taken 10%
       38:  344:            second_val = iter2->second;
       38:  345:            i +=499;
       38:  346:            if(_max < second_val){
branch  0 taken 16%
branch  1 taken 84%
        -:  347:                // Assign new value
        6:  348:                _max = second_val; 
        6:  349:             }
       38:  350:            continue;
        -:  351:        }
        -:  352:        
    18129:  353:        }else if(i % 100 ==1 && i+99 <= max_val && i <= 9801){
branch  0 taken 1%
branch  1 taken 99%
branch  2 taken 85%
branch  3 taken 15%
branch  4 taken 42%
branch  5 taken 58%
        -:  354:
       80:  355:        iter1 =  mini_cache1.find(std::pair<int,int> (i,i+99));
        -:  356:
        -:  357:        /*
        -:  358:            Just check whether number is actually cached
        -:  359:        */
       80:  360:        if(iter1!=mini_cache1.end()){
branch  0 taken 63%
branch  1 taken 38%
       50:  361:                second_val = iter1->second;
       50:  362:                i+=99;    
        -:  363:
       50:  364:            if(_max < second_val){ 
branch  0 taken 62%
branch  1 taken 38%
        -:  365:                //Assign new value
       31:  366:                _max = second_val;
       31:  367:            }
       50:  368:            continue;
        -:  369:        }    
       30:  370:       }
        -:  371:
        -:  372:        // Template 3n+1 algorithm with a few efficiencies.
  1344429:  373:        while(cur!=1){
branch  0 taken 99%
branch  1 taken 1%
  1309109:  374:            if(cur % 2 == 0){
branch  0 taken 51%
branch  1 taken 49%
   661539:  375:                cur=cur>>1;
   661539:  376:            }else{
   647570:  377:                cur=cur+ (cur>>1) + 1;
   647570:  378:                ++steps;
        -:  379:            }
  1309109:  380:            ++steps;
  1309109:  381:        }
        -:  382:
    17838:  383:        if(steps > _max) _max = steps;
branch  0 taken 1%
branch  1 taken 99%
    17660:  384:    }
        -:  385:
       53:  386:    return _max;
       57:  387:}
        -:  388:
        -:  389:// -------------
        -:  390:// collatz_print
        -:  391:// -------------
        -:  392:
function _Z13collatz_printRNSt3__113basic_ostreamIcNS_11char_traitsIcEEEEiii called 45 returned 100% blocks executed 100%
        -:  393:void collatz_print (ostream& w, int i, int j, int v) {
       45:  394:    w << i << " " << j << " " << v << endl;}
        -:  395:
        -:  396:// -------------
        -:  397:// collatz_solve
        -:  398:// -------------
        -:  399:
function _Z13collatz_solveRNSt3__113basic_istreamIcNS_11char_traitsIcEEEERNS_13basic_ostreamIcS2_EE called 8 returned 100% blocks executed 83%
        -:  400:void collatz_solve (istream& r, ostream& w) {
        8:  401:        collatz_cache();
        8:  402:        string s;
      149:  403:        while (getline(r, s)) {
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 100%
branch  3 taken 0%
branch  4 taken 83%
branch  5 taken 17%
       78:  404:            const pair<int, int> p = collatz_read(s);
branch  0 taken 100%
branch  1 taken 0%
       39:  405:            const int            i = p.first;
       39:  406:            const int            j = p.second;
       78:  407:            const int            v = collatz_eval(i, j);
branch  0 taken 100%
branch  1 taken 0%
       78:  408:            collatz_print(w, i, j, v);}
branch  0 taken 100%
branch  1 taken 0%
        8:  409:        }
        -:  410:
        -:  411:#endif
